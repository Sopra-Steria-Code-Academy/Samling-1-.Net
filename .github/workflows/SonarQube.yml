name: SonarQube

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
  
jobs:
  sonarqube:

    runs-on: self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ../.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          if (!(Test-Path "../.sonar/scanner")) {
            New-Item -Path "../.sonar/scanner" -ItemType Directory
          }
          dotnet tool update dotnet-sonarscanner --tool-path ../.sonar/scanner

      - name: Perform SonarQube Analysis
        shell: pwsh
        run: |
          ../.sonar/scanner/dotnet-sonarscanner begin `
            /k:"Code-Academy-.Net" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.exclusions="**/Migrations/*" `
            /d:sonar.coverage.exclusions="**/Program.cs,**/bootstrap.cs, **/Terraform/**/*"

          dotnet restore ./CodeAcademy
          dotnet build ./CodeAcademy
          dotnet test ./CodeAcademy --logger trx --collect:"XPlat Code Coverage" --results-directory TestResults/ --configuration release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

          ../.sonar/scanner/dotnet-sonarscanner end `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload dotnet test results        
        if: ${{ always() }} # To always run this step to publish test results when there are test failures
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: TestResults
